f;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.

import sys
import os
import time # Added for a small delay to observe the square

def print_blue_square(row, col):
    """
    Prints a blue square character at the specified row and column
    using ANSI escape codes.
    """
    # ANSI Escape character
    ESC = "\x1b"

    # Control Sequence Introducer (CSI)
    CSI = f"{ESC}["

    # SGR (Select Graphic Rendition) for color
    SGR_BLUE_FG = f"{CSI}34m"  # Foreground Blue
    SGR_RESET = f"{CSI}0m"     # Reset all attributes

    # Unicode character for a full block
    BLOCK_CHAR = "█"

    # Cursor Position (CUP) command: ESC[<ROW>;<COL>H
    # Rows and columns are 1-indexed for ANSI terminals
    CURSOR_POS = f"{CSI}{row};{col}H"

    # Combine the sequences to print the square
    # Write directly to stdout and flush to ensure immediate display
    sys.stdout.write(f"{CURSOR_POS}{SGR_BLUE_FG}{BLOCK_CHAR}{SGR_RESET}")
    sys.stdout.flush()

def setup_terminal():
    """
    Sets up the terminal for drawing: hides cursor, clears screen, moves to home.
    """
    ESC = "\x1b"
    CSI = f"{ESC}["

    # Hide cursor: ESC[?25l
    sys.stdout.write(f"{CSI}?25l")

    # Clear screen: ESC[2J
    sys.stdout.write(f"{CSI}2J")

    # Move cursor to home (1,1): ESC[H
    sys.stdout.write(f"{CSI}H")
    sys.stdout.flush()

def restore_terminal(final_row=None, final_col=None):
    """
    Restores the terminal to its default state: shows cursor and moves to a safe position.
    Optionally moves cursor to a specific final row/col.
    """
    ESC = "\x1b"
    CSI = f"{ESC}["

    # If specific coordinates are provided, move cursor there
    if final_row is not None and final_col is not None:
        sys.stdout.write(f"{CSI}{final_row};{final_col}H")
    else:
        # Otherwise, move to a new line at the bottom to avoid overwriting the prompt
        # This is a heuristic, better would be to query terminal size
        sys.stdout.write(f"{os.linesep * 2}") # Print a couple of newlines

    # Show cursor: ESC[?25h
    sys.stdout.write(f"{CSI}?25h")
    sys.stdout.flush()

def main():
    """
    Main function to draw a blue square at (20,20).
    """
    setup_terminal()

    # Draw a blue square at row 20, column 20
    # Remember ANSI rows/cols are 1-indexed.
    print_blue_square(20, 20)

    # Keep the square visible for a few seconds
    time.sleep(3)

    # Restore terminal: move cursor to a safe spot and show it
    restore_terminal()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        # Handle Ctrl+C gracefully
        restore_terminal()
        print("\nExiting.")
        sys.exit(0)


















def erase_square(row, col):
    """
    Erases a character at the specified row and column by overwriting it with a space.
    Ensures default colors are applied for the space.
    """
    # Cursor Position (CUP) command: ESC[<ROW>;<COL>H
    # Rows and columns are 1-indexed for ANSI terminals
    CURSOR_POS = f"{CSI}{row};{col}H"

    # Explicitly set default foreground and background before printing space
    # ESC[39m = default foreground, ESC[49m = default background
    SGR_DEFAULT_FG_BG = f"{CSI}39;49m"

    # Overwrite with a space using default colors
    sys.stdout.write(f"{CURSOR_POS}{SGR_DEFAULT_FG_BG} ")
    sys.stdout.flush()






def erase_square(row, col):
    """
    Erases a character at the specified row and column by overwriting it with a space.
    """
    # SGR (Select Graphic Rendition) for color reset
    SGR_RESET = f"{CSI}0m"     # Reset all attributes

    # Cursor Position (CUP) command: ESC[<ROW>;<COL>H
    # Rows and columns are 1-indexed for ANSI terminals
    CURSOR_POS = f"{CSI}{row};{col}H"

    # Overwrite with a space and reset attributes
    sys.stdout.write(f"{CURSOR_POS}{SGR_RESET} ") # Print a space to erase
    sys.stdout.flush()















	import sys

import os

import time

esc = "\x1b"

csi = f"{esc}["

def print_blue_square( row , col ):

    sgr_blue_fg = f"{csi}34m"

    sgr_reset = f"{csi}0m"

    block_char = "█"

    cursor_pos = f"{csi}{row};{col}H"

    sys.stdout.write( f"{cursor_pos}{sgr_blue_fg}{block_char}{sgr_reset}" )

    sys.stdout.flush(  )



def setup_terminal(  ):

    sys.stdout.write( f"{csi}?25l" )

    sys.stdout.write( f"{csi}2J" )

    sys.stdout.write( f"{csi}H" )

    sys.stdout.flush(  )



def restore_terminal( final_row = None , final_col = None ):

    if not final_row == None and not final_col == None:

        sys.stdout.write( f"{csi}{final_row};{final_col}H" )



    else:

        foo = 2 * os.linesep

        sys.stdout.write( f"{foo}" )



    sys.stdout.write( f"{csi}?25h" )

    sys.stdout.flush(  )



def main(  ):

    setup_terminal(  )

    print_blue_square( 20 , 20 )

    time.sleep( 3 )

    restore_terminal(  )



if __name__ == "__main__":

    try:

        main(  )



    except KeyboardInterrupt:

        restore_terminal(  )

        print( "\nExiting." )

        sys.exit( 0 )



